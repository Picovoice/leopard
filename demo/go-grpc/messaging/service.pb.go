// Code generated by protoc-gen-go. DO NOT EDIT.
// source: messaging/service.proto

package messaging

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type StatusCode int32

const (
	StatusCode_Unknown StatusCode = 0
	StatusCode_Ok      StatusCode = 1
	StatusCode_Failed  StatusCode = 2
)

var StatusCode_name = map[int32]string{
	0: "Unknown",
	1: "Ok",
	2: "Failed",
}

var StatusCode_value = map[string]int32{
	"Unknown": 0,
	"Ok":      1,
	"Failed":  2,
}

func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}

func (StatusCode) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_5ba31c2935151713, []int{0}
}

type Chunk struct {
	Content              []byte   `protobuf:"bytes,1,opt,name=Content,proto3" json:"Content,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Chunk) Reset()         { *m = Chunk{} }
func (m *Chunk) String() string { return proto.CompactTextString(m) }
func (*Chunk) ProtoMessage()    {}
func (*Chunk) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba31c2935151713, []int{0}
}

func (m *Chunk) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Chunk.Unmarshal(m, b)
}
func (m *Chunk) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Chunk.Marshal(b, m, deterministic)
}
func (m *Chunk) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Chunk.Merge(m, src)
}
func (m *Chunk) XXX_Size() int {
	return xxx_messageInfo_Chunk.Size(m)
}
func (m *Chunk) XXX_DiscardUnknown() {
	xxx_messageInfo_Chunk.DiscardUnknown(m)
}

var xxx_messageInfo_Chunk proto.InternalMessageInfo

func (m *Chunk) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

type TranscriptResponse struct {
	Transcript           string     `protobuf:"bytes,1,opt,name=transcript,proto3" json:"transcript,omitempty"`
	Code                 StatusCode `protobuf:"varint,2,opt,name=Code,proto3,enum=messaging.StatusCode" json:"Code,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *TranscriptResponse) Reset()         { *m = TranscriptResponse{} }
func (m *TranscriptResponse) String() string { return proto.CompactTextString(m) }
func (*TranscriptResponse) ProtoMessage()    {}
func (*TranscriptResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ba31c2935151713, []int{1}
}

func (m *TranscriptResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TranscriptResponse.Unmarshal(m, b)
}
func (m *TranscriptResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TranscriptResponse.Marshal(b, m, deterministic)
}
func (m *TranscriptResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TranscriptResponse.Merge(m, src)
}
func (m *TranscriptResponse) XXX_Size() int {
	return xxx_messageInfo_TranscriptResponse.Size(m)
}
func (m *TranscriptResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TranscriptResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TranscriptResponse proto.InternalMessageInfo

func (m *TranscriptResponse) GetTranscript() string {
	if m != nil {
		return m.Transcript
	}
	return ""
}

func (m *TranscriptResponse) GetCode() StatusCode {
	if m != nil {
		return m.Code
	}
	return StatusCode_Unknown
}

func init() {
	proto.RegisterEnum("messaging.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterType((*Chunk)(nil), "messaging.Chunk")
	proto.RegisterType((*TranscriptResponse)(nil), "messaging.transcriptResponse")
}

func init() { proto.RegisterFile("messaging/service.proto", fileDescriptor_5ba31c2935151713) }

var fileDescriptor_5ba31c2935151713 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0x51, 0x4b, 0xc3, 0x30,
	0x14, 0x85, 0x97, 0xa2, 0x1d, 0xbb, 0xca, 0xa8, 0x57, 0xc5, 0x22, 0x28, 0xb3, 0x4f, 0x55, 0x58,
	0x07, 0xf3, 0x1f, 0x58, 0x98, 0x0f, 0x0a, 0x42, 0xa7, 0x2f, 0x82, 0x48, 0x6c, 0x2f, 0x35, 0x74,
	0xde, 0x84, 0x24, 0xd3, 0xbf, 0x2f, 0x56, 0x6c, 0x0b, 0x3e, 0xe6, 0x3b, 0x27, 0x1c, 0xbe, 0x0b,
	0x27, 0x1f, 0xe4, 0x9c, 0xac, 0x15, 0xd7, 0x0b, 0x47, 0xf6, 0x53, 0x95, 0x94, 0x19, 0xab, 0xbd,
	0xc6, 0x49, 0x17, 0x24, 0x17, 0xb0, 0x9b, 0xbf, 0x6f, 0xb9, 0xc1, 0x18, 0xc6, 0xb9, 0x66, 0x4f,
	0xec, 0x63, 0x31, 0x13, 0xe9, 0x7e, 0xf1, 0xf7, 0x4c, 0x5e, 0x01, 0xbd, 0x95, 0xec, 0x4a, 0xab,
	0x8c, 0x2f, 0xc8, 0x19, 0xcd, 0x8e, 0xf0, 0x1c, 0xa0, 0xa7, 0xed, 0x97, 0x49, 0x31, 0x20, 0x78,
	0x09, 0x3b, 0xb9, 0xae, 0x28, 0x0e, 0x66, 0x22, 0x9d, 0x2e, 0x8f, 0xb3, 0x6e, 0x32, 0x5b, 0x7b,
	0xe9, 0xb7, 0xee, 0x27, 0x2c, 0xda, 0xca, 0xd5, 0x1c, 0xa0, 0x67, 0xb8, 0x07, 0xe3, 0x27, 0x6e,
	0x58, 0x7f, 0x71, 0x34, 0xc2, 0x10, 0x82, 0x87, 0x26, 0x12, 0x08, 0x10, 0xae, 0xa4, 0xda, 0x50,
	0x15, 0x05, 0xcb, 0x17, 0x98, 0xde, 0x93, 0x36, 0xd2, 0x56, 0xeb, 0x5f, 0x2b, 0xbc, 0x83, 0xa3,
	0x5b, 0xf2, 0x8f, 0xdd, 0xb8, 0xd2, 0xbc, 0x52, 0x1b, 0xc2, 0x68, 0xb0, 0xda, 0x5a, 0x9e, 0x9e,
	0x0d, 0xc8, 0x7f, 0xa9, 0x64, 0x94, 0x8a, 0x9b, 0xc3, 0xe7, 0x83, 0x5a, 0xcf, 0x6b, 0x6b, 0xca,
	0x45, 0xd7, 0x7d, 0x0b, 0xdb, 0xc3, 0x5d, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x0b, 0x6f, 0xdc,
	0xd7, 0x53, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// LeopardServiceClient is the client API for LeopardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LeopardServiceClient interface {
	GetTranscriptionFile(ctx context.Context, opts ...grpc.CallOption) (LeopardService_GetTranscriptionFileClient, error)
}

type leopardServiceClient struct {
	cc *grpc.ClientConn
}

func NewLeopardServiceClient(cc *grpc.ClientConn) LeopardServiceClient {
	return &leopardServiceClient{cc}
}

func (c *leopardServiceClient) GetTranscriptionFile(ctx context.Context, opts ...grpc.CallOption) (LeopardService_GetTranscriptionFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &_LeopardService_serviceDesc.Streams[0], "/messaging.LeopardService/GetTranscriptionFile", opts...)
	if err != nil {
		return nil, err
	}
	x := &leopardServiceGetTranscriptionFileClient{stream}
	return x, nil
}

type LeopardService_GetTranscriptionFileClient interface {
	Send(*Chunk) error
	CloseAndRecv() (*TranscriptResponse, error)
	grpc.ClientStream
}

type leopardServiceGetTranscriptionFileClient struct {
	grpc.ClientStream
}

func (x *leopardServiceGetTranscriptionFileClient) Send(m *Chunk) error {
	return x.ClientStream.SendMsg(m)
}

func (x *leopardServiceGetTranscriptionFileClient) CloseAndRecv() (*TranscriptResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(TranscriptResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LeopardServiceServer is the server API for LeopardService service.
type LeopardServiceServer interface {
	GetTranscriptionFile(LeopardService_GetTranscriptionFileServer) error
}

// UnimplementedLeopardServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLeopardServiceServer struct {
}

func (*UnimplementedLeopardServiceServer) GetTranscriptionFile(srv LeopardService_GetTranscriptionFileServer) error {
	return status.Errorf(codes.Unimplemented, "method GetTranscriptionFile not implemented")
}

func RegisterLeopardServiceServer(s *grpc.Server, srv LeopardServiceServer) {
	s.RegisterService(&_LeopardService_serviceDesc, srv)
}

func _LeopardService_GetTranscriptionFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(LeopardServiceServer).GetTranscriptionFile(&leopardServiceGetTranscriptionFileServer{stream})
}

type LeopardService_GetTranscriptionFileServer interface {
	SendAndClose(*TranscriptResponse) error
	Recv() (*Chunk, error)
	grpc.ServerStream
}

type leopardServiceGetTranscriptionFileServer struct {
	grpc.ServerStream
}

func (x *leopardServiceGetTranscriptionFileServer) SendAndClose(m *TranscriptResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *leopardServiceGetTranscriptionFileServer) Recv() (*Chunk, error) {
	m := new(Chunk)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _LeopardService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "messaging.LeopardService",
	HandlerType: (*LeopardServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetTranscriptionFile",
			Handler:       _LeopardService_GetTranscriptionFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "messaging/service.proto",
}
