/*
  Copyright 2022 Picovoice Inc.

  You may not use this file except in compliance with the license. A copy of the license is located in the "LICENSE"
  file accompanying this source.

  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
  an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the
  specific language governing permissions and limitations under the License.
*/

/* eslint camelcase: 0 */

import { Mutex } from "async-mutex";

import {
  aligned_alloc_type,
  pv_free_type,
  buildWasm,
  arrayBufferToStringAtIndex,
  isAccessKeyValid,
  base64ToUint8Array,
  PvFile
} from "@picovoice/web-utils";
import { LeopardConfig, LeopardInitConfig } from "./types";

/**
 * WebAssembly function types
 */

type pv_leopard_init_type = (accessKey: number, modelPath: number, enableAutomaticPunctuation: number, object: number) => Promise<number>;
type pv_leopard_process_type = (object: number, pcm: number, num_samples: number, transcription: number) => Promise<number>;
type pv_leopard_delete_type = (object: number) => Promise<void>;
type pv_status_to_string_type = (status: number) => Promise<number>
type pv_sample_rate_type = () => Promise<number>;
type pv_leopard_version_type = () => Promise<number>;

/**
* JavaScript/WebAssembly Binding for Leopard
*/

type LeopardWasmOutput = {
  aligned_alloc: aligned_alloc_type;
  memory: WebAssembly.Memory;
  pvFree: pv_free_type;
  objectAddress: number;
  pvLeopardDelete: pv_leopard_delete_type;
  pvLeopardProcess: pv_leopard_process_type;
  pvStatusToString: pv_status_to_string_type;
  sampleRate: number;
  version: string;
  transcriptionAddressAddress: number;
};

const PV_STATUS_SUCCESS = 10000;

export class Leopard {
  private readonly _pvLeopardDelete: pv_leopard_delete_type;
  private readonly _pvLeopardProcess: pv_leopard_process_type;
  private readonly _pvStatusToString: pv_status_to_string_type;

  private readonly _wasmMemory: WebAssembly.Memory;
  private _pvFree: pv_free_type;
  private readonly _memoryBuffer: Int16Array;
  private readonly _memoryBufferUint8: Uint8Array;
  private readonly _memoryBufferView: DataView;
  private readonly _processMutex: Mutex;

  private readonly _objectAddress: number;
  private readonly _alignedAlloc: CallableFunction;
  private readonly _transcriptionAddressAddress: number;

  private static _sampleRate: number;
  private static _version: string;
  private static _wasm: string;

  private static _leopardMutex = new Mutex();

  private constructor(handleWasm: LeopardWasmOutput) {
    Leopard._sampleRate = handleWasm.sampleRate;
    Leopard._version = handleWasm.version;

    this._pvLeopardDelete = handleWasm.pvLeopardDelete;
    this._pvLeopardProcess = handleWasm.pvLeopardProcess;
    this._pvStatusToString = handleWasm.pvStatusToString;

    this._wasmMemory = handleWasm.memory;
    this._pvFree = handleWasm.pvFree;
    this._objectAddress = handleWasm.objectAddress;
    this._alignedAlloc = handleWasm.aligned_alloc;
    this._transcriptionAddressAddress = handleWasm.transcriptionAddressAddress;

    this._memoryBuffer = new Int16Array(handleWasm.memory.buffer);
    this._memoryBufferUint8 = new Uint8Array(handleWasm.memory.buffer);
    this._memoryBufferView = new DataView(handleWasm.memory.buffer);
    this._processMutex = new Mutex();
  }

  /**
   * Get Leopard engine version.
   */
  get version(): string {
    return Leopard._version;
  }

  /**
   * Get sample rate.
   */
  get sampleRate(): number {
    return Leopard._sampleRate;
  }

  /**
   * Creates an instance of the Picovoice Leopard Speech-to-Text engine using a base64'd string
   * of the model file. The model size is large, hence it will try to use the
   * existing one if it exists, otherwise saves the model in storage.
   *
   * @param accessKey AccessKey generated by Picovoice Console.
   * @param modelBase64 The model in base64 string to initialize Leopard.
   * @param options Optional configuration arguments.
   * @param options.modelPath The path to save and use the model from. Use different names to use different models
   * across different Leopard instances.
   * @param options.forceWrite Flag to overwrite the model in storage even if it exists.
   * @param options.enableAutomaticPunctuation Flag to enable automatic punctuation insertion.
   *
   * @returns An instance of the Leopard engine.
   */
  public static async fromBase64(
    accessKey: string,
    modelBase64: string,
    options: LeopardConfig = {}
  ): Promise<Leopard> {
    const {modelPath = "leopard_model", forceWrite = false, ...rest} = options;

    if (!(await PvFile.exists(modelPath)) || forceWrite) {
      const pvFile = await PvFile.open(modelPath, "w");
      await pvFile.write(base64ToUint8Array(modelBase64));
    }
    return this.create(accessKey, modelPath, rest);
  }

  /**
   * Creates an instance of the Picovoice Leopard Speech-to-Text engine using '.pv' file in
   * public directory. The model size is large, hence it will try to use the existing one if it exists,
   * otherwise saves the model in storage.
   *
   * @param accessKey AccessKey generated by Picovoice Console.
   * @param publicPath The relative path to the public directory the server is hosted.
   * @param options Optional configuration arguments.
   * @param options.modelPath The path to save and use the model from. Use different names to use different models
   * across different Leopard instances.
   * @param options.forceWrite Flag to overwrite the model in storage even if it exists.
   * @param options.enableAutomaticPunctuation Flag to enable automatic punctuation insertion.
   *
   * @returns An instance of the Leopard engine.
   */
  public static async fromPublicDirectory(
    accessKey: string,
    publicPath: string,
    options: LeopardConfig = {}
  ): Promise<Leopard> {
    const {modelPath = "leopard_model", forceWrite = false, ...rest} = options;

    if (!(await PvFile.exists(modelPath)) || forceWrite) {
      const pvFile = await PvFile.open(modelPath, "w");
      const response = await fetch(publicPath);
      if (!response.ok) {
        throw new Error(`Failed to get model from '${publicPath}'`);
      }
      const data = await response.arrayBuffer();
      await pvFile.write(new Uint8Array(data));
    }
    return this.create(accessKey, modelPath, rest);
  }

  /**
   * Set base64 wasm file.
   * @param wasm Base64'd wasm file to use to initialize wasm.
   */
  public static setWasm(wasm: string): void {
    if (this._wasm === undefined) {
      this._wasm = wasm;
    }
  }

  /**
   * Creates an instance of the Picovoice Leopard Speech-to-Text engine.
   * Behind the scenes, it requires the WebAssembly code to load and initialize before
   * it can create an instance.
   *
   * @param accessKey AccessKey obtained from Picovoice Console (https://console.picovoice.ai/)
   * @param modelPath Path to the model saved in indexedDB.
   * @param initConfig Flag to enable automatic punctuation insertion.
   *
   * @returns An instance of the Leopard engine.
   */
  public static async create(accessKey: string, modelPath: string, initConfig: LeopardInitConfig): Promise<Leopard> {
    if (!isAccessKeyValid(accessKey)) {
      throw new Error('Invalid AccessKey');
    }
    return new Promise<Leopard>((resolve, reject) => {
      Leopard._leopardMutex
        .runExclusive(async () => {
          const wasmOutput = await Leopard.initWasm(accessKey.trim(), this._wasm, modelPath, initConfig);
          return new Leopard(wasmOutput);
        })
        .then((result: Leopard) => {
          resolve(result);
        })
        .catch((error: any) => {
          reject(error);
        });
    });
  }

  /**
   * Processes audio. The required sample rate can be retrieved from '.sampleRate'. The audio needs to be
   * 16-bit linearly-encoded. Furthermore, the engine operates on single-channel audio.
   *
   * @param pcm A frame of audio with properties described above.
   * @return The transcription.
   */
  public async process(pcm: Int16Array): Promise<string> {
    if (!(pcm instanceof Int16Array)) {
      throw new Error("The argument 'pcm' must be provided as an Int16Array");
    }

    const inputBufferAddress = await this._alignedAlloc(
      Int16Array,
      pcm.length * Int16Array.BYTES_PER_ELEMENT
    );
    if (inputBufferAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    const returnPromise = new Promise<string>((resolve, reject) => {
      this._processMutex
        .runExclusive(async () => {
          this._memoryBuffer.set(
            pcm,
            inputBufferAddress / Int16Array.BYTES_PER_ELEMENT
          );
          const status = await this._pvLeopardProcess(
            this._objectAddress,
            inputBufferAddress,
            pcm.length,
            this._transcriptionAddressAddress
          );
          if (status !== PV_STATUS_SUCCESS) {
            const memoryBuffer = new Uint8Array(this._wasmMemory.buffer);
            throw new Error(
              `process failed with status ${arrayBufferToStringAtIndex(
                memoryBuffer,
                await this._pvStatusToString(status)
              )}`
            );
          }
          const transcriptionAddress = this._memoryBufferView.getInt32(
            this._transcriptionAddressAddress,
            true
          );

          const transcription = arrayBufferToStringAtIndex(
            this._memoryBufferUint8,
            transcriptionAddress
          );

          await this._pvFree(transcriptionAddress);
          await this._pvFree(inputBufferAddress);

          return transcription;
        })
        .then((result: string) => {
          resolve(result);
        })
        .catch((error: any) => {
          reject(error);
        });
    });

    return returnPromise;
  }

  /**
   * Releases resources acquired by WebAssembly module.
   */
  public async release(): Promise<void> {
    await this._pvLeopardDelete(this._objectAddress);
  }

  private static async initWasm(accessKey: string, wasmBase64: string, modelPath: string, initConfig: LeopardInitConfig): Promise<any> {
    const { enableAutomaticPunctuation = true } = initConfig;

    // A WebAssembly page has a constant size of 64KiB. -> 1MiB ~= 16 pages
    // minimum memory requirements for init: 5365 pages
    const memory = new WebAssembly.Memory({ initial: 6000 });

    const memoryBufferUint8 = new Uint8Array(memory.buffer);

    const exports = await buildWasm(memory, wasmBase64);
    const aligned_alloc = exports.aligned_alloc as aligned_alloc_type;
    const pv_free = exports.pv_free as pv_free_type;
    const pv_leopard_version = exports.pv_leopard_version as pv_leopard_version_type;
    const pv_leopard_process = exports.pv_leopard_process as pv_leopard_process_type;
    const pv_leopard_delete = exports.pv_leopard_delete as pv_leopard_delete_type;
    const pv_leopard_init = exports.pv_leopard_init as pv_leopard_init_type;
    const pv_status_to_string = exports.pv_status_to_string as pv_status_to_string_type;
    const pv_sample_rate = exports.pv_sample_rate as pv_sample_rate_type;

    const transcriptionAddressAddress = await aligned_alloc(
      Int32Array.BYTES_PER_ELEMENT,
      Int32Array.BYTES_PER_ELEMENT
    );
    if (transcriptionAddressAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    const objectAddressAddress = await aligned_alloc(
      Int32Array.BYTES_PER_ELEMENT,
      Int32Array.BYTES_PER_ELEMENT
    );
    if (objectAddressAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    const accessKeyAddress = await exports.malloc(
      Uint8Array.BYTES_PER_ELEMENT *
      (accessKey.length + 1) * Uint8Array.BYTES_PER_ELEMENT
    );

    if (accessKeyAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    for (let i = 0; i < accessKey.length; i++) {
      memoryBufferUint8[accessKeyAddress + i] = accessKey.charCodeAt(i);
    }
    memoryBufferUint8[accessKeyAddress + accessKey.length] = 0;

    const modelPathAddress = await exports.malloc(
      Uint8Array.BYTES_PER_ELEMENT *
      (modelPath.length + 1) * Uint8Array.BYTES_PER_ELEMENT
    );

    if (modelPathAddress === 0) {
      throw new Error('malloc failed: Cannot allocate memory');
    }

    for (let i = 0; i < modelPath.length; i++) {
      memoryBufferUint8[modelPathAddress + i] = modelPath.charCodeAt(i);
    }
    memoryBufferUint8[modelPathAddress + modelPath.length] = 0;

    const status = await pv_leopard_init(accessKeyAddress, modelPathAddress, (enableAutomaticPunctuation) ? 1 : 0, objectAddressAddress);
    if (status !== PV_STATUS_SUCCESS) {
      throw new Error(
        `'pv_leopard_init' failed with status ${arrayBufferToStringAtIndex(
          memoryBufferUint8,
          await pv_status_to_string(status)
        )}`
      );
    }
    const memoryBufferView = new DataView(memory.buffer);
    const objectAddress = memoryBufferView.getInt32(objectAddressAddress, true);

    const sampleRate = await pv_sample_rate();
    const versionAddress = await pv_leopard_version();
    const version = arrayBufferToStringAtIndex(
      memoryBufferUint8,
      versionAddress
    );

    return {
      aligned_alloc,
      memory: memory,
      pvFree: pv_free,
      objectAddress: objectAddress,
      pvLeopardDelete: pv_leopard_delete,
      pvLeopardProcess: pv_leopard_process,
      pvStatusToString: pv_status_to_string,
      sampleRate: sampleRate,
      version: version,
      transcriptionAddressAddress: transcriptionAddressAddress,
    };
  }
}
